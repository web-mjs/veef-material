{"version":3,"file":"example-bundle.js.map","sources":["veef.js"],"sourcesContent":["const createElement = (name, component) => {\r\n    let opts = null;\r\n\r\n    customElements.define(name, class extends HTMLElement {\r\n        constructor() {\r\n            super()\r\n            this._shadowRoot = this.attachShadow(opts || {mode: 'open'})\r\n            this.$ctx = null\r\n        }\r\n        connectedCallback() {\r\n            let root = this._shadowRoot\r\n            // TODO: check if current render pass is done before allowing new render\r\n            // let rendered = false;\r\n            let lastVdom = 0\r\n            let rerender = () => {\r\n                internalState._reset()\r\n                let newVdom = wrapStyle(component(internalState, this.$ctx))\r\n\r\n                if(!lastVdom) {\r\n                    root.append(render(newVdom))\r\n                } else {\r\n                    diff(lastVdom, newVdom, root)\r\n                }\r\n                lastVdom = newVdom;\r\n                internalState._renderHandlers.map(x => x(root))\r\n            }\r\n\r\n            let internalState = {\r\n                _css: '',\r\n                _renderHandlers: [],\r\n                _reset: () => {\r\n                    /* \r\n                     * Called before each render for \"hook-like\" methods.\r\n                     * For example, addStyle() will be called every time, but\r\n                     * we *do not* want to actually concatenate the CSS\r\n                     * multiple times. Instead, always start with empty string. \r\n                     */ \r\n                    internalState._css = ''\r\n                    internalState._renderHandlers = []\r\n                },\r\n                init(defaultValues) { \r\n                    /* init({var1: value1, ...}) returns a setter-proxy for an\r\n                     * object stored in the state. If state isn't init-ed,\r\n                     * this is the first render, so we read `defaultValues`.\r\n                     */\r\n                    if(!internalState._varData) internalState._varData = defaultValues\r\n\r\n                    /* The setter proxy is needed to re-render VDOM when\r\n                     * changing a state variable. \r\n                     */\r\n                    return new Proxy(internalState._varData, {\r\n                        set(obj, prop, value){\r\n                            obj[prop] = value;\r\n                            rerender()\r\n                            return 1\r\n                        }\r\n                    })\r\n                },\r\n                addStyle: (x) => {\r\n                    /* Add CSS to the shadow DOM */\r\n                    internalState._css += x\r\n                },\r\n                slot: (name, data) => {\r\n                    DOM_SLOT._name = name || '';\r\n                    DOM_SLOT._slotChange = (e) => e.target.assignedNodes().map(x => x.$ctx = data)\r\n                    return DOM_SLOT\r\n                }, \r\n                ref: (name) => refCache[name],\r\n                after: (cb) => {\r\n                    internalState._renderHandlers.push(cb)\r\n                }\r\n            }\r\n            const wrapStyle = (vdom) => {\r\n                const styleTag = newTag('style')\r\n                styleTag._children[0] = internalState._css;\r\n                vdom._children.unshift(styleTag)\r\n                return vdom\r\n            }\r\n            rerender()\r\n        }\r\n        /*\r\n        TODO: Attribute stuff\r\n        disconnectedCallback() {\r\n        }\r\n        attributeChangedCallback(name, from, to) {\r\n            console.log(name, from,to)\r\n        }\r\n         */\r\n    })\r\n}\r\nconst render = (vdom) => {\r\n    if(!vdom._isElement) return document.createTextNode(vdom);\r\n    let name = vdom._name\r\n    if(name == 'root') name = 'div'\r\n    let newEl = document.createElement(name);\r\n    // TODO: Handle multiple slot names & context\r\n    // if(name == 'slot') newEl._name = vdom.n;\r\n    setElementProps(vdom._props, newEl)\r\n    newEl.append(...vdom._children.map(x => render(x)));\r\n    return newEl\r\n};\r\nconst _diff = (vdom1, vdom2, domNode, parentNode) => {\r\n    if(isUndef(vdom2)) { // new vDOM removes a node\r\n        if(domNode) domNode.remove()\r\n        return\r\n    }\r\n    if(isUndef(vdom1)) { // node didn't exist before\r\n        if(vdom2) parentNode.append(render(vdom2))\r\n        return\r\n    }\r\n    if(!vdom2._isElement || !vdom1._isElement) { // check if nodes aren't element (TextNode)\r\n        if(vdom1 !== vdom2) {\r\n            domNode.replaceWith(render(vdom2))\r\n            return\r\n        }\r\n        return\r\n    }\r\n    if(vdom1._name != vdom2._name) { // check if different tag names\r\n        domNode.replaceWith(render(vdom2))\r\n        return\r\n    }\r\n\r\n    /* Filter differing props old -> new */\r\n\r\n    const findOldProp = (key) => vdom1._props.find(x=>x[0]==key)[1];\r\n    setElementProps(vdom2._props.filter(x => x[1] != findOldProp(x[0])), domNode)\r\n\r\n    for(let i = 0;;i++) {\r\n        const v1 = vdom1._children[i], v2 = vdom2._children[i]\r\n        if(isUndef(v1) && isUndef(v2)) break\r\n        _diff(v1, v2, domNode.childNodes[i], domNode)\r\n    }\r\n}\r\n\r\n\r\n/*@__INLINE__*/\r\nconst diff = (vdom1, vdom2, w) => _diff(vdom1, vdom2, w.children[0])\r\n\r\n// Construct an empty virtual <tag>\r\n/*@__PURE__*/\r\nconst newTag = (ch) => ( {_name: ch, _props: [], _children: [''], x: 0, _isElement: 1 });\r\n\r\nconst DOM_SLOT = {};\r\n\r\nconst h = (strings, ...argums) => {\r\n    const TAG_NAME = 0, PROPS_START = 1, INNER_TEXT = 2;\r\n    const PROP_NAME=6, PROP_EQUALS=7, PROP_Q1=8, PROP_Q2=9, EARLY=10;\r\n    const FUNC = 15;\r\n\r\n    /* TODO: Allow a subset of tags to be autoclosed,\r\n        i.e. <br> instead of <br/> in parser */\r\n    const AUTOCLOSE = ['br', 'hr', 'img', 'input'];\r\n\r\n    const addDomSlot = (data) => {\r\n        const slotTag = newTag('slot')\r\n        slotTag._props=[['onslotchange', data._slotChange],['name', data._name]]\r\n        tag._children.push(slotTag)\r\n    }\r\n\r\n    let tag = newTag('root');\r\n    let root = tag;\r\n    let chr = null;\r\n    let stage = 2;\r\n\r\n    const tagStack = [tag];\r\n\r\n    const _put = (x) => tag._children.push(x)\r\n    const put = (x) => { tag.x=_put(x); _put('') }\r\n    const propPut = () => {\r\n        tag._props[0][1] += chr;\r\n    }\r\n\r\n    /* Run smart trim on all inner TextNodes and remove them if empty. */\r\n    const trimChildren = (node) => node.map(x => x._isElement ? x : preservingTrim(x)).filter(x => x!=='');\r\n\r\n    /* State machine for parsing JSX */\r\n    let transitions = {\r\n        [TAG_NAME]: {'>': INNER_TEXT, ' ': PROPS_START, '/':4, fn: () => {tag._name += chr} },\r\n        [PROPS_START]: {'>': INNER_TEXT, ' ': PROPS_START, '/': 4, fn: () => {\r\n            tag._props.unshift([chr, '']);\r\n            stage = PROP_NAME}},\r\n        [PROP_NAME]: {'=': PROP_EQUALS, fn: () => {tag._props[0][0]+= chr}},\r\n        [PROP_EQUALS]: {'\"': PROP_Q1, \"'\": PROP_Q2, fn: propPut},\r\n        [PROP_Q1]: {'\"': PROPS_START, fn: propPut},\r\n        [PROP_Q2]: {\"'\": PROPS_START, fn: propPut},\r\n        [INNER_TEXT]: {fn: () => {\r\n            if(chr == '<') {\r\n                tag._children = trimChildren(tag._children)\r\n                stage = 3;\r\n                return\r\n            }\r\n            tag._children[tag.x] += chr\r\n        }},\r\n        3: {'/': 4, fn: () => {\r\n            const newEl = newTag(chr)\r\n            tagStack.push(tag)\r\n            put(newEl)\r\n            tag = newEl\r\n            stage = TAG_NAME\r\n        }},\r\n        4: {fn: () => {\r\n            if(chr != '>')  return; \r\n            tag = tagStack.pop()\r\n            stage = INNER_TEXT;\r\n        }}\r\n    };\r\n    let c = 0;\r\n    for(var i = 0;;i++) {\r\n        if(i >= strings[c].length) {\r\n            if(c >= argums.length) break;\r\n            const arg = argums[c];\r\n            if(stage == PROP_NAME || stage == PROP_EQUALS) {\r\n                tag._props[0][1] = arg;\r\n                stage = PROPS_START;\r\n            }\r\n            if(stage == 2) {\r\n                if(arg == DOM_SLOT) addDomSlot(DOM_SLOT)\r\n                else\r\n                    put(arg.toString())\r\n            }\r\n            i = 0; c++;\r\n            if(isUndef(strings[c][0])) break;\r\n        }\r\n        chr  = strings[c][i]\r\n        if(stage == TAG_NAME || stage == PROPS_START) chr = chr.replace(/\\s/,' ')\r\n        let T = transitions[stage]\r\n        if(chr in T) stage = T[chr]\r\n        else T.fn()\r\n    }\r\n    root._children = trimChildren(root._children)\r\n    return root;\r\n}\r\n\r\nexport { h, createElement }\r\n\r\n/*@__PURE__*/\r\nconst isUndef = (x) => typeof x == 'undefined'\r\n\r\nlet eventHandlerCache = new Map()\r\nlet refCache = {}\r\nconst setElementProps = (props, element) => {\r\n    const isEvent = (key) => key.substr(0, 2) == 'on'\r\n    props.map(x => {\r\n        const key = x[0]\r\n        const value = x[1]\r\n        if(key == 'class' && !value.trim) {\r\n            /* If <el class={} is an object prop we can do per-class diff.\r\n             * Ex: old.class={a: true} and new.class{a: false, b: true}\r\n             * means we need to do classList.remove('a') && classList.add('b')\r\n             * ... Useful for CSS animations and such.\r\n             */\r\n            const cl = element.classList;\r\n            cl.forEach((v) => v in value ? null : value[v] = 0)\r\n\r\n            for(var cls in value) !value[cls] ? cl.remove(cls) : cl.add(cls)\r\n            return\r\n        }\r\n        if(key == 'ref') {\r\n            refCache[value] = element\r\n            return\r\n        }\r\n        if(isEvent(key) && !value.trim) {\r\n            let evName = key.toLowerCase().substr(2)\r\n            let events = eventHandlerCache.get(element) || {[evName]: null}\r\n            element.removeEventListener(evName, events[evName])\r\n            element.addEventListener(evName, value)\r\n            events[evName] = value \r\n            eventHandlerCache.set(element, events)\r\n            return\r\n        }\r\n        element.setAttribute(key, value)\r\n    })\r\n}\r\n\r\n/*@__PURE__*/\r\nconst preservingTrim = (x) => {\r\n    /* \r\n     * Removes all but one whitespace.\r\n     * Needed for proper HTML word breaking.\r\n     * f('a')       =>  'a'\r\n     * f('  \\t  a') =>  '<space> a'\r\n     * f('  a  ')   =>  '<space> a <space>'\r\n     * */\r\n    if(x === '') return ''\r\n    let fullTrim = x.trim()\r\n    let l = '', r = '';\r\n    if(x[0] !== fullTrim[0]) l = ' ';\r\n    if(x.substr(-1) !== fullTrim.substr(-1)) r = ' ';\r\n    if(fullTrim == '' && l==r) return l\r\n    return l + fullTrim + r;\r\n};\r\n"],"names":["createElement","name","component","customElements","define","HTMLElement","constructor","super","this","_shadowRoot","attachShadow","mode","$ctx","connectedCallback","root","lastVdom","rerender","internalState","_reset","newVdom","wrapStyle","diff","append","render","_renderHandlers","map","x","i","l","o","_css","init","defaultValues","_varData","Proxy","set","obj","prop","value","addStyle","slot","data","DOM_SLOT","_name","_slotChange","e","target","assignedNodes","ref","refCache","after","cb","push","vdom","styleTag","newTag","_children","unshift","_isElement","document","createTextNode","newEl","setElementProps","_props","_diff","vdom1","vdom2","domNode","parentNode","isUndef","remove","replaceWith","filter","key","find","v1","v2","childNodes","w","children","ch","m","p","h","_","strings","argums","addDomSlot","slotTag","tag","chr","stage","tagStack","_put","put","propPut","trimChildren","node","preservingTrim","transitions","fn","pop","c","length","arg","toString","replace","T","eventHandlerCache","Map","props","element","trim","substr","isEvent","evName","toLowerCase","events","get","removeEventListener","addEventListener","setAttribute","cl","classList","cls","forEach","v","add","fullTrim","r"],"mappings":"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"}